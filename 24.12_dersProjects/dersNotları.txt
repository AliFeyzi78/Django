- .gitignore dosyası ekledik (github'a pushladığımızda myenv'i göndermek istemiyorum)

-  1. Enviroment (myenv) -> Proje (clarusway) -> Application (fscohort)
            INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'fscohort',
            ]
    
Application (fscohort) için =>
     -> view 
            def home_view(request):
        return HttpResponse("Hello, this is fscohort Homepage!!")
     
     -> url   (**direk "home_view" i import ediyorum.)
            from fscohort.views import home_view

            urlpatterns = [
                path('admin/', admin.site.urls),
                path("", home_view)  ***buraya direk url yazıyoruz 
            ]
    
-------------------------------------------------------
kullanıcı bizden istekte bulunduğunda;
 - senden http://127.0.0.1:8000/ sayfasını istiyorum!
 - bu istek ilk önce 
    Projemizin (clarusway) -> settings -> ROOT_URLCONF = 'clarusway.urls' olarak tanımlanan "urls.py"e gidiyoruz
    clarusway -> urls.py -> 
        from fscohort.views import home_view
        urlpatterns = [
            path('admin/', admin.site.urls),
            path("", home_view) ----> ***boş ise home_view'e yönlendir diyorum
        ]
    App(fscohort) --> fscohort.views'da ne var:
        def home_view(request):
	        return HttpResponse("Hello, this is fscohort Homepage!!")
-------------------------------------------------
*** böyle birçok app için çok fazla url oluşturacağımızdan ve bu url'ler karışacağından;
'include' u import ederek kullanıyoruz;
*** yani bizi fscohort içinde yeni oluşturduğumuz urls.py dosyasına yönlendiriyoruz
    from django.urls import path, include
    urlpatterns = [
            path('admin/', admin.site.urls),
            path("", include("fscohort.urls"))    

------------------------------------------------------
******************************************************

MODEL OLUŞTURALIM; (database table'larımız)

#>>> fscohort/models.py

 - fscohort app imiz için bir model (tablo) oluşturacağız;
 - model field'larını otomatik oluşturulmuş django dokumanlarından bakabilirim.
 
 -> class Students(models.Model): *** class yapısıyla oluşturacağız
        first_name = models.CharField(max_length=50)
        last_name=models.CharField(max_length=50)
        number=models.IntegerField()   
- django' ya ben bir model oluşturdum diye deklere etmem gerekiyor; 
#>>> Terminal'den
-> py manage.py makemigrations
        Migrations for 'fscohort':
        fscohort\migrations\0001_initial.py
            - Create model Students  ****bu mesaj geliyor
-> py manage.py migrate   ***otomatik oluşturduğumuz alanları database'e atmak için 
-> py manage.py createsuperuser ***admin panelini oluşturacağız
......
-> http://127.0.0.1:8000/admin/ ile admin paneline ulaşıyoruz

***oluşturduğumuz model'i admin panelinde göstermek için;
#>>>> fscohort/admin.py
-> from .models import Students

-> admin.site.register(Students)

-------------------- 
??? database'e kaydettğimiz her bir elemamın panelde nasıl görünmesini istiyorsak; 
#>>>> fscohort/models.py
  ->def __str__(self):
        return self.first_name  *** panelde ismini gösterilir.

*** tablo (model)'de yaptığımız her değişiklikten sonra django'ya bilgi veriyoruz.
ex: 
    first_name yarine sir_name yaptık.
    -> py manage.py makemigrations (y/n)
    -> py manage.py migrate 
    komutlarını vermemiz gerekir

****************************************************************************
- database'de Query yapacağızzzz; 
  database'den veri alıp template'e göndereceğiz;

#>>> Terminal'den

-> py manage.py shell
>>> from fscohort.models import Student  =>Student class'ını çağırdık
>>> s1 = Student(first_name="veli", last_name="asdf",number=12234) => yeni bir instance oluşturduk
>>> s1.save() => database'e kaydediyoruz (kaydettğimiz instance'ı browserdan kontrol edebiliriz)
>>> all_s= Student.objects.all() bütün veriyi bir değişkene tanımlıyoruz ***bütün sorgularda "objects" kullanıyoruz
>>> s4= Student.objects.get(id=2)  id'den sorgulayıp değişkene atıyoruz. değişkene tanımlamadan da çağırabiliriz
>>> Student.objects.filter(number=2) numarası "2" olanları gösterilir
>>> Student.objects.exclude(first_name="veli")  adı veli olmayanları getirir
>>> s3 = Student.objects.create(first_name="dermani", last_name="ssssssf",number=1122224) **save metodunu kullanmadan ekleme yapmak için
**** "get" tek obje döner "filter" ile çok obje döner
>>> f1 = Student.objects.filter(first_name__startswith="C")  ismi C ile başlayanları getirir. çift "__" kullanıyoruz
***dokumanlarda "field-lookups" diye aratırsanız, bolca bulursunuz.
>>> f1 = Student.objects.filter(first_name__contains="a") mesala yanii













